import streamlit as st
from supabase import create_client
import pandas as pd

# --- Conex√£o e Verifica√ß√£o de Permiss√£o de Admin ---
# (O c√≥digo de conex√£o e verifica√ß√£o de 'Admin' permanece o mesmo)
@st.cache_resource
def init_connection():
    url = st.secrets["SUPABASE_URL"]
    key = st.secrets["SUPABASE_KEY"]
    return create_client(url, key)

supabase = init_connection()

if 'user_role' not in st.session_state or st.session_state.user_role != 'Admin':
    st.error("üö´ Acesso negado.")
    st.stop()

# --- Fun√ß√µes ---
def get_all_profiles():
    # Agora buscamos tamb√©m o email da tabela de usu√°rios do Supabase
    response = supabase.rpc('get_all_user_profiles').execute()
    return pd.DataFrame(response.data)

def update_user_status(user_id, new_status):
    try:
        supabase.table('perfis').update({'status': new_status}).eq('id', user_id).execute()
        return True
    except Exception as e:
        st.error(f"Erro ao atualizar status: {e}")
        return False

# CRIE ESTA FUN√á√ÉO NO SEU SQL EDITOR DO SUPABASE
# CREATE OR REPLACE FUNCTION get_all_user_profiles()
# RETURNS TABLE(id uuid, email text, nome_completo text, cargo text, status text) AS $$
# BEGIN
#     RETURN QUERY
#     SELECT p.id, u.email, p.nome_completo, p.cargo, p.status
#     FROM public.perfis p
#     JOIN auth.users u ON p.id = u.id;
# END;
# $$ LANGUAGE plpgsql;

# --- Layout da P√°gina ---
st.title("üëë Gerenciamento de Usu√°rios e Permiss√µes")
st.info("Nesta tela voc√™ pode ativar novos usu√°rios e gerenciar os existentes.")

# Bot√£o para recarregar os dados
if st.button("Atualizar Lista de Usu√°rios"):
    st.cache_data.clear()

df_perfis = get_all_profiles()

if df_perfis.empty:
    st.warning("Nenhum usu√°rio encontrado.")
else:
    # --- Se√ß√£o de Usu√°rios Pendentes ---
    st.subheader("Usu√°rios Pendentes de Ativa√ß√£o")
    df_pendentes = df_perfis[df_perfis['status'] == 'Pendente']

    if not df_pendentes.empty:
        for index, row in df_pendentes.iterrows():
            col1, col2, col3 = st.columns([2, 2, 1])
            with col1:
                st.write(f"**Nome:** {row['nome_completo']}")
            with col2:
                st.write(f"**Email:** {row['email']}")
            with col3:
                if st.button("Ativar Usu√°rio", key=f"ativar_{row['id']}", use_container_width=True):
                    if update_user_status(row['id'], 'Ativo'):
                        st.success(f"Usu√°rio {row['nome_completo']} ativado!")
                        st.rerun()
    else:
        st.success("Nenhum usu√°rio pendente de ativa√ß√£o.")

    # --- Se√ß√£o de Usu√°rios Ativos e Inativos ---
    st.subheader("Gerenciar Usu√°rios Ativos / Inativos")
    df_gerenciamento = df_perfis[df_perfis['status'] != 'Pendente']
    
    if not df_gerenciamento.empty:
        st.dataframe(df_gerenciamento, use_container_width=True, hide_index=True)
        # Aqui voc√™ pode adicionar l√≥gica para alterar cargo ou desativar usu√°rios
    else:
        st.info("Nenhum usu√°rio ativo ou inativo para gerenciar.")
